# Seminar7 Python Функции высшего порядка
# Задача №47. Решение в группах У вас есть код, который вы не можете менять (так часто бывает, когда код в
#  глубине программы используется множество раз и вы не хотите ничего сломать): transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список 
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation. 
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, 
# а нужно получить его как есть. Напишите такое лямбда-выражение transformation, 
# чтобы transformed_values получился копией values.
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
# transformed_values = list(map(lambda x: x, values))
# print(transformed_values)
# print(list(map(lambda x: x**2 if x % 2 == 0 else x**3, values)))
# Четные в квадрат, нечетные в куб
# vals = [412, 12, 354]
# func = lambda x: x**2 if x % 2 ==0 else x**3
# for item in vals:
#     print(func(item))
# С помощью map
# vals = [412, 12, 354]
# print(list(map(lambda x: x**2 if x % 2 ==0 else x**3, vals)))

# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам. 
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. 
# Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту,
# по которой вращается самая далекая планета. Круговые орбиты не учитывайте: вы знаете, 
# что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. 
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты.
# Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. 
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса.
# При решении задачи используйте списочные выражения. Подсказка: проще всего будет найти эллипс в два шага:
# сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую  площадь.
# Гарантируется, что самая далекая планета ровно одна

# Генератор списка 
# vals = [1, 2, 3]
# #что сделать   каким элементом   при каком условии
# new =[item**2 for item in vals if item % 2 == 1]
# print(new)
# import math
# def find_farthest_orbit(list_of_orbits) -> tuple:# на вход поступает список
#     temp_list = [(0 if item[0] == item[1] else item[0] * item[1]) for item in list_of_orbits]
#     # включение каждый item добавляем в список при условии что item нулевой и первый не равны то это планета
#     # если равны то это спутник сделано ч-з тернарный оператор
#     return list_of_orbits[temp_list.index(max(temp_list))] # находим максимальную площадь
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(find_farthest_orbit(orbits))

# Задача №51. Решение в группах 
# Напишите функцию same_by(characteristic, objects), которая проверяет, все ли объекты имеют одинаковое 
# значение некоторой характеристики, и возвращают True, если это так. Если значение характеристики для
# разных объектов отличается - то False. Для пустого набора объектов, функция должна возвращать True.
# Аргумент characteristic - это функция, которая принимает объект и вычисляет его характеристику.
# Ввод: values = [0, 2, 10, 6] 
# if same_by(lambda x: x % 2, values): 
#     print(‘same’) 
#           else:
#               print(‘different’)
# Вывод:same

# def same_by(characteristic, objects):
#     return len(set (map(characteristic, objects))) in [0, 1]
#     return True if le (se (map(characteristic, objects))) == 1 else (True if len(set(mep(characteristic, objects))) == 0 else False)
# values = [0, 2, 10, 6]
# if same_by(lambda x: x % 2, values):
#         print('same')
# else:
#         print('different')